#!/usr/bin/env dbqn

EQ ← ≡○•HASH
T ← EQ◶{•←"Expected `"∾(⍕𝕨)∾"` and `"∾(⍕𝕩)∾"` to be equal"}‿⟨⟩

CL ← {𝕩↑˜⊑𝕩⊐'.'}⌾⌽ •Class

   "BitArr"T CL      0‿1
   "BitArr"T CL 0•AS 0‿1
   "IntArr"T CL 1•AS 0‿1
"DoubleArr"T CL 2•AS 0‿1

Tps ← {
  r ← ⟨2•AS 𝕩⟩
  r∾↩ 𝕨◶{<1•AS 𝕩}‿{<1•AS 𝕩}‿{(∧´0=1|𝕩)◶⟨⟩‿{<1•AS 𝕩}𝕩} 𝕩
  r∾↩ 𝕨◶⟨⟩       ‿{<0•AS 𝕩}‿{(∧´ 𝕩∊↕2)◶⟨⟩‿{<0•AS 𝕩}𝕩} 𝕩
  (⊢≡1⌽⊢)◶{•←"failed type conversion"}‿⟨⟩ r
  r
}


•rl←0
a0_1 ← 1 Tps •Rand 20⥊2
b0_1 ← 1 Tps •Rand 20⥊2
ma ← ⟨a0_1 ⋄ 2 Tps 5+•Rand 20⥊10⟩
ta ← (∾ma) ∾ 2 Tps 5.5+•Rand 20⥊10

scd ← "⋆⁼"<⊸∾ "+-×÷|<≤=≥>≠⋆∨∧⌊⌈√¬"
_err ← { Fn _𝕣:
  # Fn⎊{•←"ERROR "∾(⍕fn)∾": "∾(" "∾⍕𝕨)⊢⊘∾" 𝕊 "∾⍕𝕩 ⋄ "err"}
  Fn⎊"err"
}
# dyadic AA
{ 𝕊 f:
  Fc ← F _err
  r ← a0_1 Fc⌜ b0_1
  c ← r EQ¨ <⊑r
  ∧´∘⥊◶{•←(⍕f)∾": failed AA"∾∾' '∾¨∾¨<˘⍕¨𝕩}‿1 c
}¨⍎¨ scd ∾ "/∊∾≍⊔"


# dyadic As&sA vs AA
{ 𝕊 f:
  { 𝕊 dir:
    Fc ← (dir⊑⟨F⋄F˜⟩) _err
    { 𝕊s:
      { 𝕊ca:
        a ← (≠ca) ⥊ s
        (a EQ○(ca⊸Fc) s)◶{•←(⍕f)∾": failed scalar "∾(dir⊑"𝕩"‿"𝕨")∾" ≡ "∾⍕s}‿⟨⟩ 0
      }¨ ta
    }¨ 0‿1‿2‿2.5
  }¨ 0‿1
}¨⍎¨ scd

# dyadic As & sA vs different types
{ 𝕊 f:
  { 𝕊 dir:
    Fc ← (dir⊑⟨F⋄F˜⟩) _err
    ma { a 𝕊 s:
      r ← a Fc¨ s
      c ← r EQ¨ <⊑r
      ∧´◶{•←(⍕f)∾": failed scalar "∾(dir⊑"𝕩"‿"𝕨")∾" ≡ "∾(⍕s)∾"; "∾(dir⊑"𝕨"‿"𝕩")∾" is"∾ ∾' '∾¨ c ¬⊸/ CL¨ a}‿1 c
    }⌜ 0‿1‿2‿2.5
  }¨ 0‿1
}¨⍎¨ scd

# monadic
{ 𝕊 f:
  Fc ← F _err
  { 𝕊 a:
    (a EQ○Fc 2•AS a)◶{•←(⍕f)∾": failed monadic "∾CL a}‿⟨⟩ 0
  }¨ ta
}¨⟨
  9⊸↑, 1000⊸↑  ⋄  ¯9⊸↑, ¯1000⊸↑
  9⊸↓, 1000⊸↓  ⋄  ¯9⊸↓, ¯1000⊸↓
  0⊸∾, 1⊸∾, 2⊸∾, 2.5⊸∾  ⋄  ∾⟜0, ∾⟜1, ∾⟜2, ∾⟜2.5
  4‿5⊸⥊, 100‿100⊸⥊, 20⊸⥊, 10⊸⥊, 1000⊸⥊
  ⍉4‿5⊸⥊ ⋄ <˘4‿5⊸⥊ ⋄ {><˘4‿5⥊𝕩}
  10⊸⊑ ⋄ (⥊¨3‿4)⊸⊑ ⋄ 3⊸⊏ ⋄ 3‿4⊸⊏ ⋄ 10‿10⊸⥊ ⋄ ⊏⟜(↕20)
  ⥊, ⌽, /, ∊, ⍷, ⍋, ⍒, ⊔
⟩ ∾ ⍎¨ "+-×÷|=≠⋆∨∧⌊⌈√¬"

⍎