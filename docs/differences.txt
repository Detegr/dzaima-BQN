/ - only reduce (/[] for first axis)
⌿ - only replicate
\ - only scan; executes left-to-right - aka isn't O(n^2)


dfns:
  start line with ← to force returning (e.g. {1 ⋄ 2} returns 2, {←1 ⋄ 2} returns 1)
  ↑ makes more sense with conditionals - {A:B ⋄ C} will execute B if A, but return result of C always
  {A:←B ⋄ C} returns B if A, leaving C unevaluated in that case.
  


⍴ can have a single ⍬ specifying that the number there should be fit to use all given items


"c" ←→ ,'c'
'abc' ←→ "abc"

monadic (A f) ←→ (A∘f); Can be continued into a longer train, i.e. (1+2×) ←→ {1+2×⍵}

A¨ ←→ {A}¨ (though A is evaluated only once)

⊥ & ⊤ default left arg = 2
⊤ with a scalar left arg is like Dyalogs ⊥⍣¯1

√ exists (2√ ←→ √)
⍥ & ⍢ & f⍤g & ⍫ & ⊇ & ⍮ exist from https://github.com/abrudz/dyalog-apl-extensions
⍡ & ⍁ have been added

⍸ works for input values outside of 0 & 1 (also ⍸⍣¯1 works)
monadic > & < sort
∨ & ∧ & ⍱ & ⍲ monadically are lcm(= some)/gcd(= all)/none/not-all of the array respectively (note that for the last two they're not just f/!)
⌊, ⌈, ×, - for things with char cases

⌽[dim] takes dim reversed

⎕-s:
  ⎕IO       : IO. Can be set freely, but who knows what'll happen with ~⎕IO∊0 1
  ⎕VI       : vector indexing. changes behavior if ⍳vec, ⊇, etc.
  ⎕MILLIS   : time since starting
  ⎕TIME     : time `⍎⍵` repeated ⍺ times (def = 1) in nanoseconds
  ⎕HTIME    : as above but convert to a human-readable format
  ⎕EX 'path': execute the APL program in the file
  ⎕L/⎕LA    : lowercase alphabet
  ⎕ERASE    : 'varname': erase the variable
  ⎕GC       : force Java garbage collection
  ⎕NULL     : null object (value of undefined keys in maps)
  ⎕HASH     : get hash of the array
  
  ⎕DEATHLOGGER 'name': log message upon getting garbage collected. This may be removed at any point in time without warning.
    Meant for testing for memory leaks (though make sure to call ⎕GC before concluding anything!)
  ⎕MAP/⎕NS: hashmap with keys being strings (in the future there'll probably be another type with arbitrary keys)
    monadic: create from key-value pairs
    dyadic: left - keys; right - values
    get length: |map
    has items: ×map
    set:
      map.key ← value
      'key' (map⌸) value
    get:
      map.key
      'key'⊃map
      map⌸'key'



REPL:
  )ex filename
  )oneline: disable fancy boxes
  )quote: quote strings/chars
  
  )stack: stacktrace of last error
  )debug: debug info (useful for "couldn't join everything up into a single expression")
  )class: get object class
  )atype: array type (whatever that is; pretty much )class )
  )tokenize expr; )tokenizerepr: tokenize the following code
  )off←→)exit←→)stop←→exit (yep, without a starting ")")